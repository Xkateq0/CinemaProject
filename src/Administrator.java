import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.lang.classfile.components.CodeLocalsShifter;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.awt.*;
import java.time.format.DateTimeFormatter;
import javax.swing.ImageIcon;
import javax.swing.table.TableCellRenderer;
import java.awt.Image;
/**
 *
 * @author yande
 */
public class Administrator extends javax.swing.JFrame {
    private boolean isEditing;
    /**
     * Creates new form Main
     */
    public Administrator() {
        initComponents();
        setExtendedState(Administrator.MAXIMIZED_BOTH);
        setTitle("Katana - Panel administratora");
        ImageIcon icona = new ImageIcon(getClass().getResource("Image/katana.png"));
        setIconImage(icona.getImage());
        CManage<CMovie> movieManager = new CManage<>(CMovie.class);
        List<CMovie> allMovies = movieManager.getAll();
        updateTable(jTable1, allMovies,movieManager);

        CManage<CShowing> showingManager = new CManage<>(CShowing.class);
        List<CShowing> allShowing = showingManager.getAll();
        updateTable2(jTable2, allShowing, allMovies,showingManager);

        CManage<CReservation> reservationManager = new CManage<>(CReservation.class);
        List<CReservation> allReservation = reservationManager.getAll();
        updateTable3(jTable3 ,allShowing, allMovies, allReservation,reservationManager);

        setExtendedState(Administrator.MAXIMIZED_BOTH);
        setTitle("Katana - Panel administratora");
        ImageIcon iconas = new ImageIcon(getClass().getResource("Image/katana.png"));
        setIconImage(iconas.getImage());

        logL.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                dispose();
                new Login().setVisible(true);
                JOptionPane.showMessageDialog(null, "Wylogowano");
            }
        });
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AddMovie = new javax.swing.JFrame();
        Panel_AddMovie = new javax.swing.JPanel();
        Image = new javax.swing.JButton();
        LabelTitle = new javax.swing.JLabel();
        Title = new javax.swing.JTextField();
        LabelCast = new javax.swing.JLabel();
        Cast = new javax.swing.JTextField();
        LabelGenre = new javax.swing.JLabel();
        Genre = new javax.swing.JComboBox<>();
        LabelDuration = new javax.swing.JLabel();
        Duration = new javax.swing.JSpinner();
        LabelMovieDescription = new javax.swing.JLabel();
        MovieDescription = new javax.swing.JTextField();
        FollowButton = new javax.swing.JButton();
        AddShow = new javax.swing.JFrame();
        Panel_AddShow = new javax.swing.JPanel();
        LabelMovie = new javax.swing.JLabel();
        idMovie = new javax.swing.JComboBox<>();
        LabelHall = new javax.swing.JLabel();
        idHall = new javax.swing.JComboBox<>();
        LabelDate = new javax.swing.JLabel();
        Date = new javax.swing.JFormattedTextField();
        LabelTime = new javax.swing.JLabel();
        Time = new javax.swing.JFormattedTextField();
        FollowButton2 = new javax.swing.JButton();
        bg = new javax.swing.JPanel();
        repertuar_p = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        RepertuarLabel = new javax.swing.JLabel();
        SeansLabel = new javax.swing.JLabel();
        ReservationLabel = new javax.swing.JLabel();
        sidemenu = new javax.swing.JPanel();
        logL = new javax.swing.JLabel();
        repertuar_m = new javax.swing.JPanel();
        TextRepertuar = new javax.swing.JLabel();
        seanse_m = new javax.swing.JPanel();
        TextSeanse = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        reservation_m = new javax.swing.JPanel();
        TextReservation = new javax.swing.JLabel();
        PanelSR = new javax.swing.JPanel();
        PanelR = new javax.swing.JPanel();
        ButtonAddMovie = new javax.swing.JButton();
        FieldSerach = new javax.swing.JTextField();
        ButtonSearch = new javax.swing.JButton();
        movie = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        PanelS = new javax.swing.JPanel();
        ButtonAddShow = new javax.swing.JButton();
        FieldSearch2 = new javax.swing.JTextField();
        ButtonSearch2 = new javax.swing.JButton();
        show = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        PanelRe = new javax.swing.JPanel();
        FieldSearch3 = new javax.swing.JTextField();
        ButtonSearch3 = new javax.swing.JButton();
        reservation = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();

        AddMovie.setMinimumSize(new java.awt.Dimension(620, 380));
        AddMovie.setResizable(false);
        AddMovie.getContentPane().setLayout(null);

        Panel_AddMovie.setBackground(new java.awt.Color(245, 245, 245));
        Panel_AddMovie.setForeground(new java.awt.Color(245, 245, 245));
        Panel_AddMovie.setMaximumSize(new java.awt.Dimension(650, 400));
        Panel_AddMovie.setMinimumSize(new java.awt.Dimension(650, 400));
        Panel_AddMovie.setPreferredSize(new java.awt.Dimension(610, 350));

        Image.setBackground(new java.awt.Color(128, 128, 128));
        Image.setForeground(new java.awt.Color(220, 220, 220));
        Image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/111_preview.png"))); // NOI18N
        Image.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImageActionPerformed(evt);
            }
        });

        LabelTitle.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LabelTitle.setForeground(new java.awt.Color(0, 0, 0));
        LabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LabelTitle.setText("Tytuł Filmu");

        Title.setText("Wpisz tytuł filmu");

        LabelCast.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LabelCast.setForeground(new java.awt.Color(0, 0, 0));
        LabelCast.setText("Obsada filmu");

        Cast.setText("Wpisz obsade filmu");

        LabelGenre.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LabelGenre.setForeground(new java.awt.Color(0, 0, 0));
        LabelGenre.setText("Gatunek filmu");

        Genre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Akcja", "Animacja", "Biograficzny", "Dokumentalny" , "Dramat", "Familijne", "Fantasy", "Horror" ,
                "Komedia" , "Komedia romatyczna" , "Kryminał" , "Musical" , "Przygodowy" , "Romans" , "Science Fiction" , "Thriller" , "Wojenny" , "Western"}));

        LabelDuration.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LabelDuration.setForeground(new java.awt.Color(0, 0, 0));
        LabelDuration.setText("Czas filmu");
        LabelDuration.setToolTipText("");

        LabelMovieDescription.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LabelMovieDescription.setForeground(new java.awt.Color(0, 0, 0));
        LabelMovieDescription.setText("Opis Filmu");

        MovieDescription.setText("Wpisz opis filmu");

        FollowButton.setText(isEditing ? "Zapisz Zmiany" : "Zapisz Film");
        FollowButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                FollowButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel_AddMovieLayout = new javax.swing.GroupLayout(Panel_AddMovie);
        Panel_AddMovie.setLayout(Panel_AddMovieLayout);
        Panel_AddMovieLayout.setHorizontalGroup(
            Panel_AddMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_AddMovieLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(Image, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(Panel_AddMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel_AddMovieLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(Panel_AddMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(LabelCast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LabelTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(Panel_AddMovieLayout.createSequentialGroup()
                                .addComponent(LabelGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LabelDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Cast)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel_AddMovieLayout.createSequentialGroup()
                                .addComponent(Genre, 0, 168, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Duration, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6))
                            .addGroup(Panel_AddMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(LabelMovieDescription, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(MovieDescription, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE))))
                    .addGroup(Panel_AddMovieLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(FollowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        Panel_AddMovieLayout.setVerticalGroup(
            Panel_AddMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel_AddMovieLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_AddMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Image, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(Panel_AddMovieLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(LabelTitle)
                        .addGap(3, 3, 3)
                        .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LabelCast)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Cast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LabelMovieDescription)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MovieDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(Panel_AddMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelGenre)
                            .addComponent(LabelDuration))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Panel_AddMovieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Genre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Duration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(FollowButton)))
                .addGap(60, 60, 60))
        );

        AddMovie.getContentPane().add(Panel_AddMovie);
        Panel_AddMovie.setBounds(0, 0, 610, 350);

        AddShow.setMinimumSize(new java.awt.Dimension(570, 330));
        AddShow.setResizable(false);
        AddShow.getContentPane().setLayout(null);

        Panel_AddShow.setBackground(new java.awt.Color(245, 245, 245));
        Panel_AddShow.setForeground(new java.awt.Color(245, 245, 245));
        Panel_AddShow.setMaximumSize(new java.awt.Dimension(560, 290));

        LabelMovie.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LabelMovie.setForeground(new java.awt.Color(0, 0, 0));
        LabelMovie.setText("Wybierz tytuł filmu");

        CManage<CMovie> movieManager = new CManage<>(CMovie.class);
        List<CMovie> allMovies = movieManager.getAll();
        String[] movieTitles = new String[allMovies.size()];
        for (int i = 0; i < allMovies.size(); i++) {
            movieTitles[i] = allMovies.get(i).getTitle();
        }
        idMovie.setModel(new javax.swing.DefaultComboBoxModel<>(movieTitles));

        LabelHall.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LabelHall.setForeground(new java.awt.Color(0, 0, 0));
        LabelHall.setText("Wybierz sale");

        idHall.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1"}));

        LabelDate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LabelDate.setForeground(new java.awt.Color(0, 0, 0));
        LabelDate.setText("Wpisz date");

        Date.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
                new javax.swing.text.DateFormatter(
                        new java.text.SimpleDateFormat("yyyy-MM-dd")
                )
        ));

        LabelTime.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LabelTime.setForeground(new java.awt.Color(0, 0, 0));
        LabelTime.setText("Wpisz godzine");

        Time.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(
                new javax.swing.text.DateFormatter(
                        new java.text.SimpleDateFormat("HH:mm")
                )
        ));

        FollowButton2.setText("Zapisz Seans");
        FollowButton2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                FollowButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel_AddShowLayout = new javax.swing.GroupLayout(Panel_AddShow);
        Panel_AddShow.setLayout(Panel_AddShowLayout);
        Panel_AddShowLayout.setHorizontalGroup(
            Panel_AddShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_AddShowLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(Panel_AddShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(LabelMovie, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                    .addComponent(LabelHall, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LabelDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LabelTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(idMovie, 0, 505, Short.MAX_VALUE)
                    .addComponent(idHall, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Date)
                    .addComponent(Time)
                    .addComponent(FollowButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        Panel_AddShowLayout.setVerticalGroup(
            Panel_AddShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_AddShowLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(LabelMovie)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(idMovie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(LabelHall)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(idHall, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LabelDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(LabelTime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(FollowButton2)
                .addGap(17, 17, 17))
        );

        AddShow.getContentPane().add(Panel_AddShow);
        Panel_AddShow.setBounds(0, 0, 560, 290);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        bg.setBackground(new java.awt.Color(255, 255, 255));
        bg.setPreferredSize(new java.awt.Dimension(1920, 1080));
        bg.setLayout(new javax.swing.BoxLayout(bg, javax.swing.BoxLayout.LINE_AXIS));

        repertuar_p.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(106, 90, 205));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setLayout(new java.awt.CardLayout());

        RepertuarLabel.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        RepertuarLabel.setText("REPERTUAR");
        jPanel2.add(RepertuarLabel, "card2");

        SeansLabel.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        SeansLabel.setText("SEANS");
        jPanel2.add(SeansLabel, "card2");

        ReservationLabel.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        ReservationLabel.setText("REZERWACJE");
        jPanel2.add(ReservationLabel, "card2");

        sidemenu.setBackground(new java.awt.Color(75, 0, 130));
        sidemenu.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        sidemenu.setMaximumSize(new java.awt.Dimension(151, 428));

        logL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/logO.png"))); // NOI18N
        logL.setMaximumSize(new java.awt.Dimension(50, 50));
        logL.setMinimumSize(new java.awt.Dimension(50, 50));
        logL.setPreferredSize(new java.awt.Dimension(50, 50));

        repertuar_m.setBackground(new java.awt.Color(72, 61, 139));
        repertuar_m.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                repertuar_mMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                repertuar_mMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                repertuar_mMouseExited(evt);
            }
        });

        TextRepertuar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        TextRepertuar.setForeground(new java.awt.Color(255, 255, 255));
        TextRepertuar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TextRepertuar.setText("REPERTUAR");

        javax.swing.GroupLayout repertuar_mLayout = new javax.swing.GroupLayout(repertuar_m);
        repertuar_m.setLayout(repertuar_mLayout);
        repertuar_mLayout.setHorizontalGroup(
            repertuar_mLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TextRepertuar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        repertuar_mLayout.setVerticalGroup(
            repertuar_mLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TextRepertuar, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        seanse_m.setBackground(new java.awt.Color(72, 61, 139));
        seanse_m.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                seanse_mMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                seanse_mMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                seanse_mMouseExited(evt);
            }
        });

        TextSeanse.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        TextSeanse.setForeground(new java.awt.Color(255, 255, 255));
        TextSeanse.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TextSeanse.setText("SEANSE");
        TextSeanse.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        javax.swing.GroupLayout seanse_mLayout = new javax.swing.GroupLayout(seanse_m);
        seanse_m.setLayout(seanse_mLayout);
        seanse_mLayout.setHorizontalGroup(
            seanse_mLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TextSeanse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        seanse_mLayout.setVerticalGroup(
            seanse_mLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TextSeanse, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
        );

        reservation_m.setBackground(new java.awt.Color(72, 61, 139));
        reservation_m.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reservation_mMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                reservation_mMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                reservation_mMouseExited(evt);
            }
        });


        TextReservation.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        TextReservation.setForeground(new java.awt.Color(255, 255, 255));
        TextReservation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TextReservation.setText("REZERWACJE");

        javax.swing.GroupLayout reservation_mLayout = new javax.swing.GroupLayout(reservation_m);
        reservation_m.setLayout(reservation_mLayout);
        reservation_mLayout.setHorizontalGroup(
            reservation_mLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservation_mLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TextReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        reservation_mLayout.setVerticalGroup(
            reservation_mLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TextReservation, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );


        javax.swing.GroupLayout sidemenuLayout = new javax.swing.GroupLayout(sidemenu);
        sidemenu.setLayout(sidemenuLayout);
        sidemenuLayout.setHorizontalGroup(
            sidemenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(repertuar_m, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, sidemenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(seanse_m, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(reservation_m, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(sidemenuLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );
        sidemenuLayout.setVerticalGroup(
            sidemenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidemenuLayout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addGroup(sidemenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(sidemenuLayout.createSequentialGroup()
                        .addComponent(repertuar_m, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(seanse_m, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reservation_m, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        PanelSR.setLayout(new java.awt.CardLayout());

        PanelR.setForeground(new java.awt.Color(245, 245, 245));

        ButtonAddMovie.setBackground(new java.awt.Color(72, 61, 139));
        ButtonAddMovie.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ButtonAddMovie.setText("Dodaj Film");
        ButtonAddMovie.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        ButtonAddMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddMovieActionPerformed(evt);
            }
        });

        FieldSerach.setText("Wyszukaj film");

        ButtonSearch.setText("Szukaj");
        ButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSearchActionPerformed(evt);
            }
        });

        movie.setBackground(new java.awt.Color(255, 255, 255));
        movie.setForeground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setToolTipText("");
        movie.setViewportView(jTable1);

        javax.swing.GroupLayout PanelRLayout = new javax.swing.GroupLayout(PanelR);
        PanelR.setLayout(PanelRLayout);
        PanelRLayout.setHorizontalGroup(
            PanelRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelRLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelRLayout.createSequentialGroup()
                        .addComponent(ButtonAddMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 324, Short.MAX_VALUE)
                        .addComponent(FieldSerach, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonSearch)
                        .addGap(12, 12, 12))
                    .addGroup(PanelRLayout.createSequentialGroup()
                        .addComponent(movie, javax.swing.GroupLayout.DEFAULT_SIZE, 813, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        PanelRLayout.setVerticalGroup(
            PanelRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelRLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(PanelRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(FieldSerach))
                    .addComponent(ButtonAddMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(movie, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                .addContainerGap())
        );

        PanelSR.add(PanelR, "card3");

        ButtonAddShow.setBackground(new java.awt.Color(72, 61, 139));
        ButtonAddShow.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ButtonAddShow.setText("Dodaj Seans");
        ButtonAddShow.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        ButtonAddShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddShowActionPerformed(evt);
            }
        });

        FieldSearch2.setText("Wyszukaj film");

        ButtonSearch2.setText("Szukaj");
        ButtonSearch2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSearch2ActionPerformed(evt);
            }
        });

        show.setBackground(new java.awt.Color(255, 255, 255));
        show.setForeground(new java.awt.Color(255, 255, 255));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.setToolTipText("");
        show.setViewportView(jTable2);

        javax.swing.GroupLayout PanelSLayout = new javax.swing.GroupLayout(PanelS);
        PanelS.setLayout(PanelSLayout);
        PanelSLayout.setHorizontalGroup(
            PanelSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelSLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelSLayout.createSequentialGroup()
                        .addComponent(ButtonAddShow, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 324, Short.MAX_VALUE)
                        .addComponent(FieldSearch2, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonSearch2)
                        .addGap(12, 12, 12))
                    .addGroup(PanelSLayout.createSequentialGroup()
                        .addComponent(show, javax.swing.GroupLayout.DEFAULT_SIZE, 813, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        PanelSLayout.setVerticalGroup(
            PanelSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelSLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(PanelSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ButtonSearch2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(FieldSearch2))
                    .addComponent(ButtonAddShow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(show, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                .addContainerGap())
        );

        PanelSR.add(PanelS, "card3");

        FieldSearch3.setText("Wyszukaj rezerwacje");

        ButtonSearch3.setText("Szukaj");
        ButtonSearch3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSearch3ActionPerformed(evt);
            }
        });

        reservation.setBackground(new java.awt.Color(255, 255, 255));
        reservation.setForeground(new java.awt.Color(255, 255, 255));

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable3.setToolTipText("");
        reservation.setViewportView(jTable3);

        javax.swing.GroupLayout PanelReLayout = new javax.swing.GroupLayout(PanelRe);
        PanelRe.setLayout(PanelReLayout);
        PanelReLayout.setHorizontalGroup(
            PanelReLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelReLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelReLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelReLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(FieldSearch3, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonSearch3)
                        .addGap(12, 12, 12))
                    .addGroup(PanelReLayout.createSequentialGroup()
                        .addComponent(reservation, javax.swing.GroupLayout.DEFAULT_SIZE, 813, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        PanelReLayout.setVerticalGroup(
            PanelReLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelReLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelReLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(ButtonSearch3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(FieldSearch3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reservation, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                .addContainerGap())
        );

        PanelSR.add(PanelRe, "card3");

        javax.swing.GroupLayout repertuar_pLayout = new javax.swing.GroupLayout(repertuar_p);
        repertuar_p.setLayout(repertuar_pLayout);
        repertuar_pLayout.setHorizontalGroup(
            repertuar_pLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(repertuar_pLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(sidemenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(repertuar_pLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PanelSR, javax.swing.GroupLayout.DEFAULT_SIZE, 825, Short.MAX_VALUE))
                .addContainerGap())
        );
        repertuar_pLayout.setVerticalGroup(
            repertuar_pLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(repertuar_pLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PanelSR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(sidemenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        bg.add(repertuar_p);

        getContentPane().add(bg, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void updateTable(JTable jTable1, List<CMovie> allMovies, CManage<CMovie> movieManager) {
        DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Okładka", "Tytuł"," "}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 3;
            }
        };
        jTable1.setModel(model);
        jTable1.setFont(new Font("Arial", Font.PLAIN, 20)); // Czcionka Arial, zwykła, rozmiar 18

        jTable1.setRowHeight(277);

        model.setRowCount(0);

        // Wypełnianie tabeli danymi
        for (CMovie movie : allMovies) {
            Object[] row = new Object[]{
                    movie.getId(),
                    new ImageIcon(scaleImage(movie.getImagePath(), 190, 270)),
                    movie.getTitle(),
                    " ",
            };
            model.addRow(row);
        }

        // Renderer dla obrazów
        jTable1.getColumnModel().getColumn(1).setCellRenderer(new TableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                if (value instanceof ImageIcon) {
                    JLabel label = new JLabel((ImageIcon) value);
                    label.setText("");
                    label.setHorizontalAlignment(JLabel.CENTER);
                    label.setVerticalAlignment(JLabel.CENTER);
                    return label;
                }
                return new JLabel();
            }
        });

        // Renderer dla panelu przycisków
        jTable1.getColumnModel().getColumn(3).setCellRenderer((table, value, isSelected, hasFocus, row, column) -> {
            JPanel panel = createButtonPanel(jTable1, row, movieManager);
            if (isSelected) {
                panel.setBackground(table.getSelectionBackground());
            } else {
                panel.setBackground(table.getBackground());
            }
            return panel;
        });

        // Edytor komórek
        jTable1.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(new JTextField()) {
            @Override
            public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
                return createButtonPanel(table, row, movieManager);
            }

            @Override
            public Object getCellEditorValue() {
                return null; // Wartość edytora nie jest używana
            }
        });
        DefaultTableCellRenderer wrappingAndCenterRenderer = new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                // Wywołujemy standardową funkcję renderera, żeby otrzymać standardowy komponent (np. JLabel)
                Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                // Jeżeli to jest JTextArea
                if (comp instanceof JLabel) {
                    JLabel label = (JLabel) comp;

                    // Ustawiamy wyśrodkowanie tekstu poziome i pionowe
                    label.setHorizontalAlignment(SwingConstants.CENTER);
                    label.setVerticalAlignment(SwingConstants.CENTER);
                } else if (comp instanceof JTextArea) { // Jeśli to jest JTextArea
                    JTextArea textArea = (JTextArea) comp;
                    textArea.setLineWrap(true); // Włączenie zawijania tekstu
                    textArea.setWrapStyleWord(true); // Zawijanie całych słów
                    textArea.setOpaque(true);
                    textArea.setBorder(null);
                    textArea.setFont(new Font("Arial", Font.PLAIN, 30)); // Czcionka i rozmiar tekstu
                    textArea.setAlignmentX(Component.CENTER_ALIGNMENT); // Wyrównanie poziome
                    textArea.setAlignmentY(Component.CENTER_ALIGNMENT); // Wyrównanie pionowe

                    // Jeśli komórka jest wybrana, ustawiamy tło na kolor selekcji
                    if (isSelected) {
                        textArea.setBackground(table.getSelectionBackground());
                        textArea.setForeground(table.getSelectionForeground());
                    } else {
                        textArea.setBackground(table.getBackground());
                        textArea.setForeground(table.getForeground());
                    }
                }

                return comp;
            }

        };
        // Ustawienie rendererów dla kolumn "Tytuł", "Obsada", "Opis" i "Gatunek"
        jTable1.getColumnModel().getColumn(0).setCellRenderer(wrappingAndCenterRenderer); // "ID"
        jTable1.getColumnModel().getColumn(2).setCellRenderer(wrappingAndCenterRenderer); // "Tytuł"


        // Ustawienie szerokości kolumn i zablokowanie ich zmiany rozmiaru
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(150);
        jTable1.getColumnModel().getColumn(0).setResizable(false);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(199);
        jTable1.getColumnModel().getColumn(1).setResizable(false);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(788);
        jTable1.getColumnModel().getColumn(2).setResizable(false);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(200);
        jTable1.getColumnModel().getColumn(3).setResizable(false);

        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jTable1.getTableHeader().setReorderingAllowed(false);
    }

    // Metoda pomocnicza do tworzenia panelu z przyciskami
    private JPanel createButtonPanel(JTable table, int row, CManage<CMovie> movieManager) {
        CManage<CShowing> showManager = new CManage<>(CShowing.class);
        JButton deleteButton = new JButton("Usuń Film");
        deleteButton.setBackground(new Color(72, 61, 139));
        deleteButton.setForeground(Color.WHITE);
        deleteButton.setFocusPainted(false);
        deleteButton.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
        deleteButton.setFont(new Font("Arial", Font.BOLD, 16)); // Większa czcionka
        deleteButton.setPreferredSize(new Dimension(150, 40)); // Ustawienie rozmiaru przycisku
        deleteButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        deleteButton.addActionListener(e -> handleDeleteAction(table, row, movieManager,showManager));

        JButton editButton = new JButton("Edytuj Film");
        editButton.setBackground(new Color(72, 61, 139));
        editButton.setForeground(Color.WHITE);
        editButton.setFocusPainted(false);
        editButton.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
        editButton.setFont(new Font("Arial", Font.BOLD, 16)); // Większa czcionka
        editButton.setPreferredSize(new Dimension(150, 40)); // Ustawienie rozmiaru przycisku
        editButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        editButton.addActionListener(e -> handleEditAction(table, row, movieManager));

        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 0, 5, 0); // Marginesy między przyciskami
        gbc.gridx = 0;
        gbc.gridy = 0;
        panel.add(deleteButton, gbc);
        gbc.gridy++;
        panel.add(editButton, gbc);

        return panel;
    }

    // Obsługa akcji usuwania filmu
    private void handleDeleteAction(JTable table, int row, CManage<CMovie> movieManager, CManage<CShowing> showManager) {
        int movieId = (int) table.getModel().getValueAt(row, 0);
        int response = JOptionPane.showConfirmDialog(
                null,
                "Czy na pewno chcesz usunąć film o ID: " + movieId + "?",
                "Potwierdzenie usunięcia",
                JOptionPane.YES_NO_OPTION
        );

        if (response == JOptionPane.YES_OPTION) {
            try {
                // Pobierz film do usunięcia
                CMovie movieToRemove = movieManager.getById(movieId);

                // Znajdź wszystkie seanse powiązane z tym filmem
                List<CShowing> allShows = showManager.getAll();
                List<CShowing> showsToRemove = new ArrayList<>();

                for (CShowing show : allShows) {
                    if (show.getIdMovie() == movieId) {
                        // Sprawdź, czy seans ma zarezerwowane miejsca
                        if (show.isReserved()) {
                            JOptionPane.showMessageDialog(null,
                                    "Nie można usunąć seansu o ID: " + show.getId() + " z powodu zarezerwowanych miejsc.",
                                    "Błąd", JOptionPane.ERROR_MESSAGE);
                            return;
                        } else {
                            // Dodaj seans do listy do usunięcia
                            showsToRemove.add(show);
                        }
                    }
                }

                // Usuń seanse, które nie mają zarezerwowanych miejsc
                for (CShowing showToRemove : showsToRemove) {
                    showManager.remove(showToRemove);
                    showManager.close();
                    movieManager.remove(movieToRemove);
                    movieManager.close();
                    updateTable(table, movieManager.getAll(), movieManager);
                }
                movieManager.remove(movieToRemove);
                movieManager.close();
                updateTable(table, movieManager.getAll(), movieManager);


            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Błąd przy usuwaniu filmu: " + ex.getMessage(), "Błąd", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    // Obsługa akcji edytowania filmu
    private void handleEditAction(JTable table, int row, CManage<CMovie> movieManager) {
        int movieId = (int) table.getModel().getValueAt(row, 0);
        try {
            CMovie movieToEdit = movieManager.getById(movieId);
            openEditWindow(movieToEdit);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Błąd przy edytowaniu filmu: " + ex.getMessage(), "Błąd", JOptionPane.ERROR_MESSAGE);
        }
    }


    private Image scaleImage(String imagePath, int width, int height) {
        try {
            ImageIcon icon = new ImageIcon(imagePath);
            Image img = icon.getImage();

            BufferedImage scaledImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
            Graphics2D g2d = scaledImage.createGraphics();

            g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);

            g2d.drawImage(img, 0, 0, width, height, null);
            g2d.dispose();

            return scaledImage;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public void updateTable2(JTable jTable2, List<CShowing> allShowing, List<CMovie> allMovies, CManage<CShowing> showManager) {
        DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Tytuł Filmu", "Data", "Godzina rozpoczęcia", "Sala", " "}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 5; // Tylko kolumna z przyciskami będzie edytowalna
            }
        };
        jTable2.setModel(model);
        jTable2.setFont(new Font("Arial", Font.PLAIN, 18));

        jTable2.setRowHeight(70);
        model.setRowCount(0);

        for (CShowing showing : allShowing) {
            String movieTitle = showing.getMovieTitle(allMovies);
            Object[] row = new Object[]{
                    showing.getId(),
                    movieTitle,
                    showing.getDate().format(DateTimeFormatter.ofPattern("yyyy-MM-dd")),
                    showing.getTime().format(DateTimeFormatter.ofPattern("HH:mm")),
                    showing.getIdHall(),
                    " " // Pusta kolumna na przyciski
            };
            model.addRow(row);
        }

        // Renderer dla panelu przycisków w ostatniej kolumnie
        jTable2.getColumnModel().getColumn(5).setCellRenderer((table, value, isSelected, hasFocus, row, column) -> {
            JPanel panel2 = createButtonPanel2(jTable2, row, showManager);
            if (isSelected) {
                panel2.setBackground(table.getSelectionBackground());
            } else {
                panel2.setBackground(table.getBackground());
            }
            return panel2;
        });

        jTable2.getColumnModel().getColumn(5).setCellEditor(new DefaultCellEditor(new JTextField()) {
            @Override
            public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
                return createButtonPanel2(table, row, showManager);
            }

            @Override
            public Object getCellEditorValue() {
                return null; // Wartość edytora nie jest używana
            }
        });

        // Centrowanie tekstu w kolumnach
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i < jTable2.getColumnCount()-1; i++) {
            jTable2.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }

        // Ustawienie szerokości kolumn
        jTable2.getColumnModel().getColumn(0).setPreferredWidth(150);  // ID
        jTable2.getColumnModel().getColumn(0).setResizable(false);
        jTable2.getColumnModel().getColumn(1).setPreferredWidth(400); // Tytuł Filmu
        jTable2.getColumnModel().getColumn(1).setResizable(false);
        jTable2.getColumnModel().getColumn(2).setPreferredWidth(300); // Data
        jTable2.getColumnModel().getColumn(2).setResizable(false);
        jTable2.getColumnModel().getColumn(3).setPreferredWidth(200); // Godzina
        jTable2.getColumnModel().getColumn(3).setResizable(false);
        jTable2.getColumnModel().getColumn(4).setPreferredWidth(85);  // Sala
        jTable2.getColumnModel().getColumn(4).setResizable(false);
        jTable2.getColumnModel().getColumn(5).setPreferredWidth(200); // Przycisk
        jTable2.getColumnModel().getColumn(5).setResizable(false);

        jTable2.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jTable2.getTableHeader().setReorderingAllowed(false);
    }

    // Metoda pomocnicza do tworzenia panelu z przyciskami
    private JPanel createButtonPanel2(JTable table, int row, CManage<CShowing> showManager) {
        JButton deleteButton = new JButton("Usuń Seans");
        deleteButton.setBackground(new Color(72, 61, 139));
        deleteButton.setForeground(Color.WHITE);
        deleteButton.setFocusPainted(false);
        deleteButton.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
        deleteButton.setFont(new Font("Arial", Font.BOLD, 16));
        deleteButton.setPreferredSize(new Dimension(150, 40));
        deleteButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        deleteButton.addActionListener(e -> handle2DeleteAction(table, row, showManager));

                    /*
                    JButton editButton = new JButton("Edytuj Seans");
                    editButton.setBackground(new Color(72, 61, 139));
                    editButton.setForeground(Color.WHITE);
                    editButton.setFocusPainted(false);
                    editButton.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
                    editButton.setFont(new Font("Arial", Font.BOLD, 16));
                    editButton.setPreferredSize(new Dimension(150, 40));
                    editButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
                    editButton.addActionListener(e -> handle2EditAction(table, row, showManager));
                    */
        JPanel panel2 = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 0, 5, 0);
        gbc.gridx = 0;
        gbc.gridy = 0;
        panel2.add(deleteButton, gbc);

        return panel2;


    }
    private void handle2DeleteAction(JTable table, int row, CManage<CShowing> showManager) {
        CManage<CMovie> movieManager = new CManage<>(CMovie.class);
        int showId = (int) table.getModel().getValueAt(row, 0);

        try {
            // Pobierz seans do usunięcia
            CShowing showToRemove = showManager.getById(showId);

            LocalDateTime showingDateTime = LocalDateTime.of(showToRemove.getDate(), showToRemove.getTime());

            // Sprawdź, czy seans już się odbył
            if (showingDateTime.isBefore(LocalDateTime.now())) {
                // Jeśli seans już się odbył, wyświetl komunikat i zakończ operację
                JOptionPane.showMessageDialog(null, "Nie można usunąć seansu, który już się odbył.", "Błąd", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Sprawdź, czy seans jest zarezerwowany
            if (showToRemove.isReserved()) {
                // Jeśli przynajmniej jedno miejsce jest zarezerwowane, wyświetl komunikat i nie usuwaj seansu
                JOptionPane.showMessageDialog(null, "Nie można usunąć seansu, ponieważ są zarezerwowane miejsca.", "Błąd", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Jeśli nie ma zarezerwowanych miejsc, zapytaj użytkownika o potwierdzenie
            int response = JOptionPane.showConfirmDialog(
                    null,
                    "Czy na pewno chcesz usunąć seans o ID: " + showId + "?",
                    "Potwierdzenie usunięcia",
                    JOptionPane.YES_NO_OPTION
            );

            if (response == JOptionPane.YES_OPTION) {
                // Usuń seans
                showManager.remove(showToRemove);
                showManager.close();
                updateTable2(table, showManager.getAll(), movieManager.getAll(), showManager);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Błąd przy usuwaniu seansu: " + ex.getMessage(), "Błąd", JOptionPane.ERROR_MESSAGE);
        }
    }
    /*
    // Obsługa akcji edytowania filmu
    private void handle2EditAction(JTable table, int row, CManage<CShowing> showManager) {
        int showId = (int) table.getModel().getValueAt(row, 0);
        try {
            CShowing showToEdit = showManager.getById(showId);
            openEditShowWindow(showToEdit);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Błąd przy edytowaniu filmu: " + ex.getMessage(), "Błąd", JOptionPane.ERROR_MESSAGE);
        }
    }
     */
    public void updateTable3(JTable jTable3, List<CShowing> allShowing, List<CMovie> allMovies, List<CReservation> allReservation ,CManage<CReservation> reservationManager) {
        CManage<CShowing> showingManage = new CManage<>(CShowing.class);
        DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Tytuł Filmu", "Data", "Ilosc biletow" , "Dochód", ""}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 5;
            }
        };
        jTable3.setModel(model);
        jTable3.setFont(new Font("Arial", Font.PLAIN, 18));
        jTable3.setRowHeight(70);
        model.setRowCount(0);

        for (CReservation reservation : allReservation) {
            int idShowing = reservation.getIdShowing();

            CShowing showing = showingManage.getById(idShowing);

            if (showing != null) {
                String movieTitle = showing.getMovieTitle(allMovies);

                Object[] row = new Object[]{
                        reservation.getId(),
                        movieTitle,
                        showing.getDate().format(DateTimeFormatter.ofPattern("yyyy-MM-dd")),
                        reservation.ticketNumber(),
                        reservation.calculateTotalPrice(),
                        " " // Pusta kolumna na przyciski
                };
                model.addRow(row);
            } else {
                System.err.println("Nie znaleziono seansu o ID: " + idShowing);
            }
        }
        // Renderer dla panelu przycisków w ostatniej kolumnie
        jTable3.getColumnModel().getColumn(5).setCellRenderer((table, value, isSelected, hasFocus, row, column) -> {
            JPanel panel3 = createButtonPanel3(jTable3, row, reservationManager);
            if (isSelected) {
                panel3.setBackground(table.getSelectionBackground());
            } else {
                panel3.setBackground(table.getBackground());
            }
            return panel3;
        });

        jTable3.getColumnModel().getColumn(5).setCellEditor(new DefaultCellEditor(new JTextField()) {
            @Override
            public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
                return createButtonPanel3(table, row, reservationManager);
            }

            @Override
            public Object getCellEditorValue() {
                return null; // Wartość edytora nie jest używana
            }
        });

        // Centrowanie tekstu w kolumnach
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i < jTable3.getColumnCount()-1; i++) {
            jTable3.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }

        // Ustawienie szerokości kolumn
        jTable3.getColumnModel().getColumn(0).setPreferredWidth(150);  // ID
        jTable3.getColumnModel().getColumn(0).setResizable(false);
        jTable3.getColumnModel().getColumn(1).setPreferredWidth(385); // Tytuł Filmu
        jTable3.getColumnModel().getColumn(1).setResizable(false);
        jTable3.getColumnModel().getColumn(2).setPreferredWidth(300); // Data
        jTable3.getColumnModel().getColumn(2).setResizable(false);
        jTable3.getColumnModel().getColumn(3).setPreferredWidth(150); // Ilosc Biletow
        jTable3.getColumnModel().getColumn(3).setResizable(false);
        jTable3.getColumnModel().getColumn(4).setPreferredWidth(150);  // Dochod Biletow
        jTable3.getColumnModel().getColumn(4).setResizable(false);
        jTable3.getColumnModel().getColumn(5).setPreferredWidth(200); // Przycisk
        jTable3.getColumnModel().getColumn(5).setResizable(false);

        jTable3.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jTable3.getTableHeader().setReorderingAllowed(false);

    }
    private JPanel createButtonPanel3(JTable table, int row, CManage<CReservation> reservationManage) {
        JButton displayButton = new JButton("Wyswietl");
        displayButton.setBackground(new Color(72, 61, 139));
        displayButton.setForeground(Color.WHITE);
        displayButton.setFocusPainted(false);
        displayButton.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
        displayButton.setFont(new Font("Arial", Font.BOLD, 16));
        displayButton.setPreferredSize(new Dimension(150, 40));
        displayButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        // Poprawiamy ActionListener
        displayButton.addActionListener(e -> {
            int reservationId = (int) table.getModel().getValueAt(row, 0);
            CReservation reservation = reservationManage.getById(reservationId);
            resFrame resFrameWindow = new resFrame(reservation);
            resFrameWindow.setVisible(true);
        });

        JPanel panel3 = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 0, 5, 0);
        gbc.gridx = 0;
        gbc.gridy = 0;
        panel3.add(displayButton, gbc);

        return panel3;
    }

    private void repertuar_mMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_repertuar_mMouseEntered
       repertuar_m.setBackground(new java.awt.Color(106,90,205));
    }//GEN-LAST:event_repertuar_mMouseEntered

    private void repertuar_mMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_repertuar_mMouseExited
        repertuar_m.setBackground(new java.awt.Color(72,61,139));
    }//GEN-LAST:event_repertuar_mMouseExited

    private void seanse_mMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seanse_mMouseEntered
        seanse_m.setBackground(new java.awt.Color(106,90,205));
    }//GEN-LAST:event_seanse_mMouseEntered

    private void seanse_mMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seanse_mMouseExited
       seanse_m.setBackground(new java.awt.Color(72,61,139));
    }//GEN-LAST:event_seanse_mMouseExited

    private void reservation_mMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reservation_mMouseEntered
        reservation_m.setBackground(new java.awt.Color(106, 90, 205)); // Zmiana na reservation_m
    }//GEN-LAST:event_reservation_mMouseEntered

    private void reservation_mMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reservation_mMouseExited
        reservation_m.setBackground(new java.awt.Color(72, 61, 139)); // Zmiana na reservation_m
    }//GEN-LAST:event_reservation_mMouseExited

    private void ButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSearchActionPerformed
        String searchQuery = FieldSerach.getText().trim().toLowerCase();

        if (searchQuery.isEmpty()) {
            CManage<CMovie> movieManager = new CManage<>(CMovie.class);
            updateTable(jTable1, movieManager.getAll(),movieManager);
        } else {
            CManage<CMovie> movieManager = new CManage<>(CMovie.class);
            List<CMovie> filteredMovies = new ArrayList<>();

            for (CMovie movie : movieManager.getAll()) {
                if (movie.getTitle().toLowerCase().contains(searchQuery)) {
                    filteredMovies.add(movie);
                }
            }

            updateTable(jTable1, filteredMovies,movieManager);
        }
    }//GEN-LAST:event_ButtonSearchActionPerformed


    private CMovie currentMovie = new CMovie();
    private CShowing currentShow = new CShowing();

    private void ImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImageActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setFileFilter(new FileNameExtensionFilter("Images", "jpg"));

        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();

            String destinationPath = "src//Image/" + selectedFile.getName();

            File destinationFolder = new File("images");
            if (!destinationFolder.exists()) {
                destinationFolder.mkdirs();
            }

            try {
                Files.copy(selectedFile.toPath(), new File(destinationPath).toPath(), StandardCopyOption.REPLACE_EXISTING);
                currentMovie.setImagePath(destinationPath);

            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Failed to upload image!");
            }
        }
    }//GEN-LAST:event_ImageActionPerformed

    private void FollowButtonActionPerformed(java.awt.event.ActionEvent evt) {
        FollowButton.setText(isEditing ? "Zapisz Zmiany" : "Zapisz Film");
        CManage<CMovie> movieManager = new CManage<>(CMovie.class);

        String title = Title.getText().trim();
        String cast = Cast.getText().trim();
        String movieDescription = MovieDescription.getText().trim();
        String genre = (String) Genre.getSelectedItem();
        int duration = (int) Duration.getValue();

        if (title.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Uzupełnij Tytuł filmu!");
            return;
        } else if (cast.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Uzupełnij Obsade filmu!");
            return;
        } else if (movieDescription.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Uzupełnij Opis filmu!");
            return;
        } else if (genre == null || genre.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Wprowadź Gatunek filmu");
            return;
        } else if (duration <= 0) {
            JOptionPane.showMessageDialog(this, "Film musi potrwać dłużej");
            return;
        } else if (currentMovie.getImagePath() == null || currentMovie.getImagePath().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Dodaj Okładkę Filmu!");
            return;
        }

        // Jeśli edytujesz film
        if (isEditing) {
            currentMovie.setTitle(title);
            currentMovie.setMovieDescription(movieDescription);
            currentMovie.setCast(cast);
            currentMovie.setGenre(genre);
            currentMovie.setDuration(duration);

            movieManager.save(currentMovie); // Zapisz zaktualizowany film
            JOptionPane.showMessageDialog(this, "Film został zaktualizowany!");
        } else {
            String imagePath = currentMovie.getImagePath();
            CMovie newMovie = new CMovie(title, cast, genre, duration,imagePath,movieDescription);
            movieManager.save(newMovie);
            JOptionPane.showMessageDialog(this, "Film został dodany!");
        }

        try {
            movieManager.close();
            updateTable(jTable1, movieManager.getAll(), movieManager);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Nie można zapisać filmu");
            e.printStackTrace();
        }

        AddMovie.dispose(); // Zamknij okno
    }

    private void FollowButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        CManage<CShowing> showManager = new CManage<>(CShowing.class);
        CManage<CMovie> movieManager = new CManage<>(CMovie.class);

        String selectedMovieTitle = (String) idMovie.getSelectedItem();
        String selectedHall = (String) idHall.getSelectedItem();
        String showDateString = Date.getText();
        String showTimeString = Time.getText();

        if (selectedMovieTitle == null || selectedMovieTitle.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Wybierz Film!");
            return;
        } else if (selectedHall == null || selectedHall.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Wybierz Salę!");
            return;
        } else if (showDateString == null || showDateString.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Wybierz Datę seansu!");
            return;
        } else if (showTimeString == null || showTimeString.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Wybierz Czas seansu!");
            return;
        }
        LocalDate showDate = null;
        if (!showDateString.matches("\\d{4}-\\d{2}-\\d{2}")) {
            JOptionPane.showMessageDialog(this, "Niepoprawny format daty! Format powinien być: yyyy-MM-dd");
            return;
        } else {
            showDate = LocalDate.parse(showDateString);
        }

        LocalTime showTime = null;
        if (!showTimeString.matches("\\d{2}:\\d{2}")) {
            JOptionPane.showMessageDialog(this, "Niepoprawny format godziny! Format powinien być: HH:mm");
            return;
        } else {
            showTime = LocalTime.parse(showTimeString);
        }

        int movieId = -1;
        List<CMovie> allMovies = movieManager.getAll();
        for (CMovie movie : allMovies) {
            if (movie.getTitle().equals(selectedMovieTitle)) {
                movieId = movie.getId();
                break;
            }
        }

        if (movieId == -1) {
            JOptionPane.showMessageDialog(this, "Film nie został znaleziony!");
            return;
        }

        // Pobranie długości filmu
        int movieDuration = 0;
        for (CMovie movie : allMovies) {
            if (movie.getId() == movieId) {
                movieDuration = movie.getDuration();
                break;
            }
        }

        List<CShowing> allShows = showManager.getAll();
        for (CShowing existingShow : allShows) {
            if (existingShow.getIdHall() == Integer.parseInt(selectedHall) && existingShow.getDate().equals(showDate)) {
                // Obliczamy czas zakończenia istniejącego seansu
                LocalTime existingShowEndTime = existingShow.getTime().plusMinutes(movieDuration);

                // Sprawdzamy, czy czasy się nakładają
                if (showTime.isBefore(existingShowEndTime) && showTime.plusMinutes(movieDuration).isAfter(existingShow.getTime())) {
                    JOptionPane.showMessageDialog(this, "W tym czasie w tej sali już trwa inny seans!");
                    return;
                }
            }
        }

        int hallId = Integer.parseInt(selectedHall);
        CShowing newShow = new CShowing(showDate, showTime, movieId, hallId);
        showManager.save(newShow);
        JOptionPane.showMessageDialog(this, "Seans został dodany!");

        try {
            showManager.close();
            updateTable2(jTable2, showManager.getAll(), movieManager.getAll(), showManager);  // Aktualizacja tabeli
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Nie można zapisać seansu");
            e.printStackTrace();
        }

        AddShow.dispose();
    }


    private void ButtonSearch2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSearch2ActionPerformed
        String searchQuery = FieldSearch2.getText().trim().toLowerCase();
        CManage<CMovie> movieManager = new CManage<>(CMovie.class);
        List<CMovie> allMovies = movieManager.getAll();

        if (searchQuery.isEmpty()) {
            CManage<CShowing> showManager = new CManage<>(CShowing.class);
            updateTable2(jTable2, showManager.getAll(), allMovies,showManager);
        } else {
            CManage<CShowing> showManager = new CManage<>(CShowing.class);
            List<CShowing> filteredShows = new ArrayList<>();

            for (CShowing showing : showManager.getAll()) {
                String movieTitle = showing.getMovieTitle(allMovies);
                if (movieTitle.toLowerCase().contains(searchQuery)) {
                    filteredShows.add(showing);
                }
            }
            updateTable2(jTable2, filteredShows, allMovies,showManager);
        }
    }//GEN-LAST:event_ButtonSearch2ActionPerformed

    private void ButtonSearch3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSearch3ActionPerformed
        String searchQuery = FieldSearch3.getText().trim();

        // Pobieranie danych
        CManage<CMovie> movieManager = new CManage<>(CMovie.class);
        List<CMovie> allMovies = movieManager.getAll();

        CManage<CShowing> showManager = new CManage<>(CShowing.class);
        List<CShowing> allShow = showManager.getAll();

        CManage<CReservation> reservationManager = new CManage<>(CReservation.class);
        List<CReservation> allReservation = reservationManager.getAll();

        if (searchQuery.isEmpty()) {
            updateTable3(jTable3, allShow, allMovies, allReservation, reservationManager);
        } else {
            try {
                int searchId = Integer.parseInt(searchQuery);

                List<CReservation> filteredReservations = allReservation.stream()
                        .filter(reservation -> reservation.getId() == searchId)
                        .toList();

                if (filteredReservations.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Nie znaleziono rezerwacji o podanym ID.", "Brak wyników", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    updateTable3(jTable3, allShow, allMovies, filteredReservations, reservationManager);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Proszę wprowadzić poprawne ID (liczbę).", "Błąd wyszukiwania", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_ButtonSearch3ActionPerformed




    private void ButtonAddMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddMovieActionPerformed
        setTitle("Dodaj Film");
        openAddMovieWindow();
    }//GEN-LAST:event_ButtonAddMovieActionPerformed

    private void ButtonAddShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddShowActionPerformed
        setTitle("Dodaj Seans");
        openAddShowWindow();
    }//GEN-LAST:event_ButtonAddShowActionPerformed

    private void repertuar_mMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_repertuar_mMouseClicked
        CManage<CMovie> movieManager = new CManage<>(CMovie.class);
        PanelS.setVisible(false);
        PanelR.setVisible(true);
        PanelRe.setVisible(false);
        SeansLabel.setVisible(false);
        RepertuarLabel.setVisible(true);
        ReservationLabel.setVisible(false);
        updateTable(jTable1, movieManager.getAll(), movieManager);
    }//GEN-LAST:event_repertuar_mMouseClicked

    private void seanse_mMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seanse_mMouseClicked
        CManage<CShowing> showManager = new CManage<>(CShowing.class);
        CManage<CMovie> movieManager = new CManage<>(CMovie.class);
        PanelR.setVisible(false);
        PanelS.setVisible(true);
        PanelRe.setVisible(false);
        SeansLabel.setVisible(true);
        RepertuarLabel.setVisible(false);
        ReservationLabel.setVisible(false);
        updateTable2(jTable2, showManager.getAll(), movieManager.getAll(), showManager);
    }//GEN-LAST:event_seanse_mMouseClicked

    private void reservation_mMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reservation_mMouseClicked
        CManage<CReservation> reservationManager = new CManage<>(CReservation.class);
        CManage<CShowing> showManager = new CManage<>(CShowing.class);
        CManage<CMovie> movieManager = new CManage<>(CMovie.class);
        PanelR.setVisible(false);
        PanelS.setVisible(false);
        PanelRe.setVisible(true);
        ReservationLabel.setVisible(true);
        RepertuarLabel.setVisible(false);
        SeansLabel.setVisible(false);
        updateTable3(jTable3, showManager.getAll(), movieManager.getAll(),reservationManager.getAll(), reservationManager);
    }//GEN-LAST:event_reservation_mMouseClicked



    public void openEditWindow(CMovie currentMovie) {
        this.currentMovie = currentMovie;
        Title.setText(currentMovie.getTitle());
        Cast.setText(currentMovie.getCast());
        MovieDescription.setText(currentMovie.getMovieDescription());
        Genre.setSelectedItem(currentMovie.getGenre());
        Duration.setValue(currentMovie.getDuration());

        if (currentMovie.getImagePath() != null) {
            Image.setIcon(new ImageIcon(scaleImage(currentMovie.getImagePath(), 100, 100)));
        }
        isEditing = true;
        AddMovie.setVisible(true);
    }

    public void openAddMovieWindow() {

        currentMovie = new CMovie();
        Title.setText("");
        Cast.setText("");
        MovieDescription.setText("");
        Genre.setSelectedIndex(0);
        Duration.setValue(0);
        Image.setIcon(new ImageIcon(getClass().getResource("/Image/111_preview.png")));

        isEditing = false;
        AddMovie.setVisible(true);
    }
    /*
    public void openEditShowWindow(CShowing currentShow) {
        this.currentShow = currentShow;

        // Wybór filmu
        CManage<CMovie> movieManager = new CManage<>(CMovie.class);
        List<CMovie> allMovies = movieManager.getAll();

        // Jeżeli lista filmów jest pusta, wyświetl odpowiednią wiadomość
        if (allMovies.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Brak dostępnych filmów w bazie!", "Błąd", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String[] movieTitles = new String[allMovies.size()];
        for (int i = 0; i < allMovies.size(); i++) {
            movieTitles[i] = allMovies.get(i).getTitle();
        }
        idMovie.setModel(new DefaultComboBoxModel<>(movieTitles));

        // Przypisanie wybranego filmu
        String selectedMovieTitle = currentShow.getMovieTitle(allMovies);
        idMovie.setSelectedItem(selectedMovieTitle);

        // Ustawienie sali
        idHall.setSelectedItem(currentShow.getIdHall());

        // Poprawka dla daty i godziny
        LocalDate date = currentShow.getDate(); // Załóżmy, że currentShow ma metodę getDate() typu LocalDate
        LocalTime time = currentShow.getTime(); // Załóżmy, że currentShow ma metodę getTime() typu LocalTime

        // Konwertowanie LocalDate na String w formacie 'yyyy-MM-dd'
        String dateString = date.toString(); // "yyyy-MM-dd"
        Date.setValue(dateString); // Ustawienie sformatowanej daty jako String

        // Konwertowanie LocalTime na String w formacie 'HH:mm'
        String timeString = time.toString(); // "HH:mm"
        Time.setValue(timeString); // Ustawienie sformatowanej godziny jako String

        isEditing = true;
        AddShow.setVisible(true);
    }
     */

    public void openAddShowWindow() {
        currentShow = new CShowing(); // Tworzymy nowy obiekt seansu

        // Wybór filmu
        CManage<CMovie> movieManager = new CManage<>(CMovie.class);
        List<CMovie> allMovies = movieManager.getAll();
        String[] movieTitles = new String[allMovies.size()];
        for (int i = 0; i < allMovies.size(); i++) {
            movieTitles[i] = allMovies.get(i).getTitle();
        }
        idMovie.setModel(new javax.swing.DefaultComboBoxModel<>(movieTitles));

        // Inicjalizacja sali
        idHall.setSelectedIndex(0); // Domyślnie ustawiamy pierwszą salę

        // Inicjalizacja daty
        Date.setValue(null); // Pole daty jest puste

        // Inicjalizacja godziny
        Time.setValue(null); // Pole godziny jest puste

        AddShow.setVisible(true);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame AddMovie;
    private javax.swing.JFrame AddShow;
    private javax.swing.JButton ButtonAddMovie;
    private javax.swing.JButton ButtonAddShow;
    private javax.swing.JButton ButtonSearch;
    private javax.swing.JButton ButtonSearch2;
    private javax.swing.JButton ButtonSearch3;
    private javax.swing.JTextField Cast;
    private javax.swing.JFormattedTextField Date;
    private javax.swing.JSpinner Duration;
    private javax.swing.JTextField FieldSearch2;
    private javax.swing.JTextField FieldSearch3;
    private javax.swing.JTextField FieldSerach;
    private javax.swing.JButton FollowButton;
    private javax.swing.JButton FollowButton2;
    private javax.swing.JComboBox<String> Genre;
    private javax.swing.JButton Image;
    private javax.swing.JLabel LabelCast;
    private javax.swing.JLabel LabelDate;
    private javax.swing.JLabel LabelDuration;
    private javax.swing.JLabel LabelGenre;
    private javax.swing.JLabel LabelHall;
    private javax.swing.JLabel LabelMovie;
    private javax.swing.JLabel LabelMovieDescription;
    private javax.swing.JLabel LabelTime;
    private javax.swing.JLabel LabelTitle;
    private javax.swing.JTextField MovieDescription;
    private javax.swing.JPanel PanelR;
    private javax.swing.JPanel PanelRe;
    private javax.swing.JPanel PanelS;
    private javax.swing.JPanel PanelSR;
    private javax.swing.JPanel Panel_AddMovie;
    private javax.swing.JPanel Panel_AddShow;
    private javax.swing.JLabel RepertuarLabel;
    private javax.swing.JLabel SeansLabel;
    private javax.swing.JLabel ReservationLabel;
    private javax.swing.JLabel TextRepertuar;
    private javax.swing.JLabel TextReservation;
    private javax.swing.JLabel TextSeanse;
    private javax.swing.JFormattedTextField Time;
    private javax.swing.JTextField Title;
    private javax.swing.JPanel bg;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JComboBox<String> idHall;
    private javax.swing.JComboBox<String> idMovie;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JLabel logL;
    private javax.swing.JScrollPane movie;
    private javax.swing.JPanel repertuar_m;
    private javax.swing.JPanel repertuar_p;
    private javax.swing.JScrollPane reservation;
    private javax.swing.JPanel reservation_m;
    private javax.swing.JPanel seanse_m;
    private javax.swing.JScrollPane show;
    private javax.swing.JPanel sidemenu;
    // End of variables declaration//GEN-END:variables
}
